// pyCodeGen test file.

#PYGEN_BEGIN
class Thingo:
    string1 = "ASDF"
    string2 = "BLAH"

print "print() output should appear on console, not in output file"
#PYGEN_END
// Inline substitution
void ${Thingo.string1}something() {
}

// Looped generation
#PYGEN_BEGIN
funcname = Thingo.string2 + "func_"
for i in range(5):
	gen.writeln("void " + funcname + str(i) + "();")
#PYGEN_END
#PYGEN_OUTPUT

// More inline substitution
void ${Thingo.string1}something2() {
}

void ${"Funky" + "Function"}something3() {
}

// More looped generation
// #PYGEN_BEGIN
// funcname = Thingo.string2 + "func_"
// for i in range(5):
// 	gen.writeln("void " + funcname + str(i) + "();")
// #PYGEN_END
// #PYGEN_OUTPUT
